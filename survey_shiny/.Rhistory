clust_analysis(name = "SNF", data = info_clust, distanceMatrix = W)
psn <- graph_from_adjacency_matrix(W, weighted = TRUE, mode = "undirected", diag = F)
V(psn)$cluster <- info_clust$Response
plot(psn)
x <- get.data.frame(psn)
c
x
V(psn)$cluster
x <- get.data.frame(psn)
write.csv(x, "psn.csv", quote = F)
node_info <- data.frame(node = V(psn)$name, cluster = V(psn)$cluster)
write.csv(node_info, "psn_nodes.csv", quote = F)
node_info <- data.frame(node = V(psn)$name, cluster = V(psn)$cluster)
write.csv(node_info, "psn_nodes.csv", quote = F)
cwd()
dir()
x <- get.data.frame(psn)
write.csv(x, "psn.csv", quote = F)
node_info <- data.frame(node = V(psn)$name, cluster = V(psn)$cluster)
write.csv(node_info, "psn_nodes.csv", quote = F)
gep$data
gep$W
## Import libraries and utils ==================================================
library(readxl)
library(dplyr)
library(tidyr)
library(psych)
library(ggplot2)
library(igraph)
library(GGally)
library(gplots)
library(biomaRt)
library(stringr)
library(DGCA)
library(zoo)
library(RColorBrewer)
library(WGCNA)
library(knitr)
library(kableExtra)
library(NanoStringNorm)
library(DESeq2)
library(excel.link)
library(SNFtool)
library(readr)
library(caret)
#| echo: false
setwd("C:/Users/Antonella/Desktop/network-analysis-PEOPLE")
source("script/utils.R")
hidden_password <- read_file("password.txt") ## load hidden password
## 1. Absolute Cell Counts
data_cip <- read_excel("data/1 Variabili immunologicheaggiornato 24.05.2023.xlsx",
skip = 0)
categories <- data.frame(category = as.character(data_cip[1,]),
var = as.character(data_cip[2,]))
categories <- categories %>%
mutate(category = na.locf(category, na.rm = FALSE)) %>%
na.omit()
data_cip <- read_excel("data/1 Variabili immunologicheaggiornato 24.05.2023.xlsx",
skip = 2)
data_cip$`CB Y/N`[50] <- "Y"
## 2. Gene Expression
data_gep <- read_excel("data/4 normalized.expr.48samples.xlsx")
## 3. Clinical Data
data_clin <- xl.read.file("data/5 PEOPLE aggiornato.xlsx",
password = hidden_password,
xl.sheet = 1)
data_clin <- data_clin[,-2]
# Circulating Immune Profiling -------------------------------------------------
## Preprocessing
data_cip$`Sample:` <- unlist(lapply(data_cip$`Sample:`, function(x) str_sub(x, end = -5)))
# Variables to exclude
to_exlude <- c("CD45+", "CD56+", "CD16+", "Granulocytes (CD15+ or CD16+)",
"Lymphocytes (CD3+ or CD19+ or CD56+)")
cip_pre <- na.omit(data_cip[1:59,-1], cols="CB Y/N")
cip_pre <- cip_pre %>% dplyr::select(!to_exlude)
preY <- cip_pre[cip_pre$`CB Y/N` == "Y",]
preN <- cip_pre[cip_pre$`CB Y/N` == "N",]
# dim(preY); dim(preN)
cip_post <-  na.omit(data_cip[65:nrow(data_cip),-1], cols="CB Y/N")
cip_post <- cip_post %>% dplyr::select(!to_exlude)
postY <- cip_post[cip_post$`CB Y/N` == "Y",]
postN <- cip_post[cip_post$`CB Y/N` == "N",]
# dim(postY); dim(postN)
preY <- as.data.frame(preY)
postY <- as.data.frame(postY)
preN <- as.data.frame(preN)
postN <- as.data.frame(postN)
commonY <- preY$`Sample:`[preY$`Sample:` %in% postY$`Sample:`]
commonN <- preN$`Sample:`[preN$`Sample:`%in% postN$`Sample:`]
# -----------------
# common patients
common_patients <- intersect(rownames(preY), rownames(postY))
# pre-therapy and post-therapy common patients
preY <- preY[common_patients, ]
postY <- postY[common_patients, ]
# common patients
common_patients <- intersect(rownames(preN), rownames(postN))
# pre-therapy and post-therapy common patients
preN <- preN[common_patients, ]
postN <- postN[common_patients, ]
# -----------------
rownames(preY) <- preY$`Sample:`
preY <- preY[,-c(1,2,3)] %>%
mutate_all(as.numeric) %>% scale()
rownames(postY) <- postY$`Sample:`
postY <-
postY[,-c(1,2,3)] %>%
mutate_all(as.numeric) %>% scale()
rownames(preN) <- preN$`Sample:`
preN <-
preN[,-c(1,2,3)] %>%
mutate_all(as.numeric) %>% scale()
rownames(postN) <- postN$`Sample:`
postN <-
postN[,-c(1,2,3)] %>%
mutate_all(as.numeric) %>% scale()
# dim(preY); dim(preN); dim(postY); dim(postN)
# Gene Expression Profiling ----------------------------------------------------
## Preprocessing
#1. Remove Housekeeping
data_gep <- data_gep[data_gep$Code.Class == "Endogenous",]
raw_counts <- data_gep[-c(1,2,3,4)]
gep_patients <- as.numeric(sapply(colnames(raw_counts),
function(x) substr(x,10,11)))
info_dat <- data.frame(ID = data_clin$ID,
GEP_num = ifelse(data_clin$ID %in% gep_patients,data_clin$ID, NA),
best_response = data_clin$best_response,
group = ifelse(data_clin$best_response == "PD", "NR", "R"))
info_dat <- info_dat[info_dat$best_response!="nv" & !is.na(info_dat$GEP_num),]
R_idx <- gep_patients %in% info_dat$GEP_num[info_dat$group == "R"]
NR_idx <- gep_patients %in% info_dat$GEP_num[info_dat$group == "NR"]
expr_R <- as.data.frame(raw_counts[, R_idx])
expr_NR <- as.data.frame(raw_counts[, NR_idx])
rownames(expr_R) <- data_gep$Name
rownames(expr_NR) <- data_gep$Name
#2. Remove zero expression genes
no_zeros_genes_R <- rownames(expr_R)[rowSums(expr_R == 0) == 0]
no_zeros_genes_NR <- rownames(expr_NR)[rowSums(expr_NR == 0) == 0] #these are their names
## Let's consider only these genes
filtr_expr_R <- expr_R[intersect(no_zeros_genes_R,
no_zeros_genes_NR),]
filtr_expr_NR <- expr_NR[intersect(no_zeros_genes_R,
no_zeros_genes_NR),]
#| echo: false
# Preprocessing
preY <- cip_pre[cip_pre$`CB Y/N` == "Y",]
preN <- cip_pre[cip_pre$`CB Y/N` == "N",]
preY <- as.data.frame(preY)
preN <- as.data.frame(preN)
rownames(preY) <- preY$`Sample:`
preY <- preY[,-c(1,2,3)] %>%
mutate_all(as.numeric) %>% scale()
rownames(preN) <- preN$`Sample:`
preN <-
preN[,-c(1,2,3)] %>%
mutate_all(as.numeric) %>% scale()
immune_data <- rbind(preY, preN)
gene_expr_data <- rbind(t(filtr_expr_R), t(filtr_expr_NR))
rownames(gene_expr_data) <- unlist(lapply(rownames(gene_expr_data),
function(x) paste0("PT", as.integer(str_sub(x, start = -2)))))
gene_expr_data <- gene_expr_data[,c("CD48", "CD45RO", "PMS2", "PGPEP1", "EIF2B4", "ITGAL", "CD2",
"GIMAP4", "PTPN11", "PTPRC")]
construct_network <- function(data, K, alpha=0.5, reverse = F, C = 2) {
data <- standardNormalization(data)
distance_matrix <- dist2(data,data)^(1/2)
W <- SNFtool::affinityMatrix(distance_matrix, K, alpha)
# class(W) <- "Similarity"
# print(estimateNumberOfClustersGivenGraph(W))
clusters <- spectralClustering(W, K=C)
if (reverse == FALSE){clusters <- ifelse(clusters == 2,1,2)}
cluster_df <- data.frame(Sample=rownames(W), Cluster=clusters)
data_clin$patient_code <- paste0("PT", data_clin$ID)
data_clin$time <- data_clin$date_death - data_clin$start_therapy_date
info_clust <- merge(cluster_df, data_clin, by.x = "Sample", by.y = "patient_code")
info_clust$Response <- ifelse(info_clust$best_response == "PD", 1, 2)
# need to match the order of rows between distance matrix and cluster df
matching <- match(rownames(W), info_clust$Sample)
info_clust <- info_clust[matching,]
return(list(data = info_clust, W = W))}
clust_analysis <-function(name="",
data,
distanceMatrix=NULL,
similarity=TRUE,
snf = FALSE)
{
time <- data$time
status <- data$death
group <- data$Cluster
clusterNum <- length(unique(group))
dataset <- list(time,status, Community=group)
# Confusion Matrices
print(confusionMatrix(as.factor(data$Cluster), as.factor(data$Response)))
cat("\n")
cat("FP: ",data$Sample[which(data$Cluster == 1 & data$Response == 2)]) # FP
cat("\n")
cat("FN: ",data$Sample[which(data$Cluster == 2 & data$Response == 1)]) # FN
cat("\n")
cat("\nComparison with best_response:\n")
print(table(data$Cluster, data$best_response))
displayClustersWithHeatmap(distanceMatrix, group, col = rev(brewer.pal(9, "Blues")))
si <- CancerSubtypes::silhouette_SimilarityMatrix(group,distanceMatrix)
print(fviz_silhouette(si) +
coord_flip())
# Survival Analysis
cat("\n\n\n==========================   Survival  ==========================\n")
surv <- ggsurvfit(survfit2(Surv(time, status) ~ Community, dataset)) +
add_confidence_interval()
print(surv)
cat("\n\nMedian survival time:\n")
print(survfit2(Surv(time, status) ~ Community, dataset))
sdf <- survdiff(Surv(time, status) ~ Community, dataset) ##log-rank test
cat("                                                     \n")
cat("\nLog-Rank test: --------------------------------------------------\n")
print(sdf)
# cat(paste(name,"Cluster=",clusterNum,"  "))
cat("\nCox regression model: -------------------------------------------\n")
return(coxph(Surv(time, status) ~ Community, dataset) %>% tbl_regression(exp = T))
p_value <- 1 - pchisq(sdf$chisq, length(sdf$n) - 1)
# print(p_value)
# while (!is.null(dev.list()))  dev.off()
# png(paste0("plots/", name, "-heatmap.png"))
# dev.off()
# png(paste0("plots/", name, "-surv_curves.png"), width = 600, height = 450)
# dev.off()
}
gep <- construct_network(gene_expr_data, K = 22)
clust_analysis(name = "GEP", data = gep$data, distanceMatrix = gep$W)
cip <- construct_network(immune_data, K = 25)
clust_analysis(name = "CIP", data = cip$data, distanceMatrix = cip$W)
common_samples <- intersect(rownames(immune_data), rownames(gene_expr_data))
immune_network <- cip$W[common_samples, common_samples]
gene_expr_network <- gep$W[common_samples, common_samples]
networks <- list(immune_network, gene_expr_network)
W <- SNF(networks, K=19, t=20)
estimateNumberOfClustersGivenGraph(W)
clusters<- spectralClustering(W, K=2)
# clusters <- ifelse(clusters == 2, 1, 2)
# Visualize the clusters
cluster_df <- data.frame(Sample=rownames(W), Cluster=clusters)
data_clin$patient_code <- paste0("PT", data_clin$ID)
data_clin$time <- data_clin$date_death - data_clin$start_therapy_date
info_clust <- merge(cluster_df, data_clin, by.x = "Sample", by.y = "patient_code")
info_clust$Response <- ifelse(info_clust$best_response == "PD", 1, 2)
matching <- match(rownames(W), info_clust$Sample)
info_clust <- info_clust[matching,]
clust_analysis(name = "SNF", data = info_clust, distanceMatrix = W)
psn <- graph_from_adjacency_matrix(W, weighted = TRUE, mode = "undirected", diag = F)
V(psn)$cluster <- info_clust$Response
x <- get.data.frame(psn)
write.csv(x, "psn.csv", quote = F)
x
V(psn)$name
info_clust$Sample
x
View(x)
hist(W, breaks=50, main="Histogram of Edge Weights", xlab="Edge Weight")
immune_clusters <- spectralClustering(immune_network, K=2)
gene_expr_clusters <- spectralClustering(gene_expr_network, K=2)
immune_clusters
gene_expr_clusters
library(cluster)
silhouette_scores <- silhouette(clusters, dist(W))
plot(silhouette_scores)
plot(psn, vertex.color=clusters, vertex.size=5, edge.width=E(psn)$weight*5)
# Extract edges and weights
edges <- get.data.frame(psn)
high_weight_edges <- subset(edges, weight > quantile(edges$weight, 0.95))
# Inspect nodes with high-weight edges
high_weight_nodes <- unique(c(high_weight_edges$from, high_weight_edges$to))
print(high_weight_nodes)
# Compare clusters of high-weight nodes
high_weight_clusters <- clusters[high_weight_nodes]
print(high_weight_clusters)
high_weight_edges
high_weight_nodes
clusters[high_weight_nodes]
clusters
high_weight_nodes
node_info
node_info <- data.frame(node = V(psn)$name, cluster = V(psn)$cluster)
node_info
# Import libraries  -------------------------------------------------------
library(shiny)
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(viridis)
library(ggplot2)
library(ggpubr)
library(ggradar)
library(tidyverse)
library(scales)
library(tibble)
library(hrbrthemes)
library(grid)
library(gridExtra)
library(DT)
library(RColorBrewer)
# library(shinydashboard)
library(bs4Dash)
library(ggh4x)
library(waiter)
library(shinyWidgets)
# toast options
toastOpts <- list(
autohide = TRUE,
icon = "fas fa-home",
close = FALSE,
position = "bottomRight"
)
setwd("C:/Users/Antonella/Desktop/bbdataeng/BB4FAIR/survey_shiny")
# Load Data ---------------------------------------------------------------
# tier_BB <- read_xlsx("/punteggi_tiering.xlsx", sheet = "abb")
scores <- read_xlsx("./tiering.xlsx", sheet = "total_score")
setwd("C:/Users/Antonella/Desktop/bbdataeng/BB4FAIR/survey_shiny/bb4FAIR_app")
## add tiers
scores$tier <- ifelse(scores$total_score > 20, "Mature",
ifelse(scores$total_score < 11, "Starting", "Advanced"))
# Load Data ---------------------------------------------------------------
# tier_BB <- read_xlsx("/punteggi_tiering.xlsx", sheet = "abb")
scores <- read_xlsx("./tiering.xlsx", sheet = "total_score")
#
# scores <- read_xlsx("./punteggi_tiering.xlsx", sheet = "punteggi_totali")
colnames(scores)[1] <- "BB_ID"
info_area <- read_xlsx("./quantitative.xlsx", sheet = "razionale")
# questions <- read_xlsx("./quantitativa.xlsx", sheet = 4)
## add tiers
scores$tier <- ifelse(scores$total_score > 20, "Mature",
ifelse(scores$total_score < 11, "Starting", "Advanced"))
macroareas <- info_area[1:14,c("question","area")]
macroareas$question <- str_replace(str_replace(macroareas$question, " ", "_"), "-", "_")
scores <- scores %>%arrange(desc(total_score))
scores$BB_ID <- paste0("BB", seq(1:dim(scores)[1]))
## question labels
source("./plot.R") # import plots
plots <- list(
"Personnel dedicated to the Biobank" = function() chart_personnel,
"Biobank personnel activities" = function() chart_personnel2,
"Data annotation experience" = function() chart_personnel3,
"Terminologies" = function() chart_term,
"Personnel with experience in CDM" = function() chart_personnel4,
"Common Data Models" = function() chart_cdm,
"Personnel with experience in FHIR model" = function() chart_personnel5,
"Biobank dedicated LIMS" = function() chart_lims,
"BIMS in place" = function() chart_lims2,
"Clinical data linkage" = function() chart_clindata,
"Data storage without LIMS" = function() chart_nosist,
"Informatic infrastructure for biobank" = function() chart_infrstr,
"IT ifrstructure management" = function() chart_infrstr2,
"Massive storage system" = function() chart_storage,
"Federated Research" = function() chart_fed_search,
"Resources for Federated Search services" = function() chart_fed_search2,
"Data Warehouse" = function() chart_dwh,
"Infrastructure for data storage" = function() chart_dwh2,
"NGS laboratory" = function() chart_ngs,
"NGS technology" = function() chart_ngs_tec,
"'omics' platform" = function() chart_omics,
"Laboratory accessibility" = function() chart_lab,
"Laboratory specialization" = function() chart_lab2,
"Data specialization" = function() chart_data,
"Data type stored" = function() chart_data2,
"Ontologies" = function() chart_onto,
"Data sharing" = function() chart_network,
"Data network" = function() chart_network2,
"Data crossing" = function() chart_data4,
"System for cross-reference data" = function() chart_data5,
"Informed consent" = function() chart_ic,
"Informed consent model" = function() chart_ic_model
)
questions_labels <- names(plots)
# User Interface ----------------------------------------------------------
ui <-
dashboardPage(preloader = list(html = tagList(spin_1(), "Loading ..."), color = "#001f3f"),
dashboardHeader(skin = "navy",
title = div(
style = "display: flex; align-items: center; justify-content: center; font-size: 18px; padding: 15px",
"BB4FAIR"
),
tags$li(
class = "dropdown",
style = "display: flex; align-items: center; width: 100%;",
fluidRow(
column(
width = 6.5,
offset = 1,
align = "center",
span("Digital Maturity Survey for Biobanking", style = "font-size: 30px; color: white;")
),
column(
width = 2,
# offset = 1,
align = "center",
img(src = 'Italy_grande_str_bbmri_bianco.png', style = "width: 70%;")
)
)
)
),
sidebar = dashboardSidebar(
status = "navy",
sidebarMenu(id = "tabs",
menuItem(text = "Scores", tabName = "Scores", icon = icon("table")),
menuItem(text = "Feature Analysis", tabName = "Answers", icon = icon("chart-simple")),
menuItem(text = "Visualization", tabName = "Visualization", icon = icon("chart-area")),
menuItem(text = "Tiering", tabName = "Tiering", icon = icon("star"))
)
),
body = dashboardBody(
tabItems(
tabItem('Scores',
titlePanel(""),
br(),
fluidRow(
column(4, selectInput("bb_name", "Biobank ID:", c("All", unique(as.character(scores$BB_ID))))),
column(4, selectInput("tier", "Tier:", c("All", unique(as.character(scores$tier))))),
column(4, selectizeInput("macroarea", "Macro-areas:", choices = c("All", unique(as.character(macroareas$area))), multiple = TRUE))
),
DT::dataTableOutput("scores")
),
tabItem('Answers',
titlePanel(""),
fluidRow(
br(),
bs4Card(title= "Question", HTML("<p>Explore the answers to different questions by selecting from the list below.</p>"), selectizeInput(inputId = "question", label = NULL, choices = questions_labels, multiple = FALSE), collapsible = FALSE),
bs4Card(tags$style("#graph {margin-top: 50px;}"), plotOutput("graph", height = "60vh", width="100%"), collapsible = FALSE)
)
),
tabItem('Visualization', fluidPage(
br(),
fluidRow(
column(3.5, plotOutput("density")),
column(4, plotOutput("heatmap"))
),
br(),
fluidRow(
column(width = 3, class = "col-sm-3", plotOutput("radar1")),
column(width = 3, class = "col-sm-3", plotOutput("radar2")),
column(width = 3, class = "col-sm-3", plotOutput("radar3")),
column(width = 3, class = "col-sm-3", plotOutput("legend"))
)
)),
tabItem('Tiering',
titlePanel("Evaluation of your Biobank"),
br(),
fluidRow(
column(4,
bs4Card(title = "Select your Biobank ID", selectInput(inputId = "bb_name_plot", label = NULL, choices = unique(as.character(scores$BB_ID))), width = 10, headerBorder = FALSE, collapsible = FALSE),
valueBoxOutput("tiering_valueBox", width = 10),
bs4Card(title = "Ranking Position", label = NULL, uiOutput("slider"), width = 10, collapsible = FALSE)
),
column(8,
bs4Card(plotOutput("eval_plot"), class = "plot-box", width = 12, headerBorder = FALSE, collapsible = FALSE)
)
),
fluidRow(
column(12,
bs4Card(title = "Suggestions", " ", width = 12, headerBorder = FALSE, collapsed = TRUE)
)
)
)
)
),
controlbar = dashboardControlbar(title = "Digital Maturity Survey"),
footer = bs4DashFooter(left = "bbdataeng-team", right = "Strengthening BBMRI.it", fixed = FALSE)
)
new_names <- c(
"IT head",
"dedicated personnel",
"ontologies richness",
"common data models",
"BIMS",
"data management",
"IT infrastructures",
"massive storage",
"IT components",
"data warehouse",
"clinical data availability",
"annotations",
"registry data availability",
"informed consent")
new_names
dati$nuova_variabile
colnames(scores)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
## question labels
source("plot.R") # import plots
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Antonella/Downloads')
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='bbdataeng',
token='1A6630C592D9A63FD1C8D65C0F08F390',
secret='SLd4aCbiTMTzLbzh1QVn2/egA2b0H5JpLay6/iSG')
rsconnect::deployApp('bb4FAIR_app')
setwd("C:/Users/Antonella/Desktop/bbdataeng/BB4FAIR/survey_shiny")
library(rsconnect)
rsconnect::setAccountInfo(name='bbdataeng',
token='1A6630C592D9A63FD1C8D65C0F08F390',
secret='SLd4aCbiTMTzLbzh1QVn2/egA2b0H5JpLay6/iSG')
rsconnect::deployApp('bb4FAIR_app')
