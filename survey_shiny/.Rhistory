## Correspondence between category and variable
categories <- data.frame(category = as.character(data_cip[1,]),
var = as.character(data_cip[2,]))
categories <- categories %>%
mutate(category = na.locf(category, na.rm = FALSE)) %>%
na.omit()
## add cluster info from 1st PEOPLE paper
categories$cluster <- c(1, 2, 5, 4, 4, 2, 2, 6, 3, 3, 3, 3, 2, 6, 6, 6, 5, 5, 1,
1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 3, 1, 1, 2, 1, 1, 2)
pre <-  na.omit(data_cip[3:61,-1])  #57 samples
# Adjust colnames
colnames(pre) <- variables
pre <-  pre[!(is.na(pre$`Sample:`)), ]
# Adjust rownames
rownames(pre) <- pre$`Sample:`
pre <- pre[,-1]
pre <- pre %>% dplyr::select(!to_exlude)
# Fix rownames = patient codes
rownames(pre) <- sub("Pr1", "", rownames(pre))
# Responding Group (Y) and Non-Responding Group (N)
pre_Y <- pre[pre$`CB Y/N` == "Y",]
pre_N <- pre[pre$`CB Y/N` == "N",]
## Take only numerical
pre_Y <- pre_Y[,-c(1,2)]
pre_N <- pre_N[,-c(1,2)]
pre_Y <- apply(pre_Y, 2, as.numeric)
pre_N <- apply(pre_N, 2, as.numeric)
# Fix rownames = patient codes
rownames(pre_Y) <- rownames(pre[pre$`CB Y/N` == "Y",])
rownames(pre_N) <- rownames(pre[pre$`CB Y/N` == "N",])
# N.B.: There is a patient considered as Non Responder before the therapy
# and considered as Responder after therapy
## add this row into pre_Y
pre_Y <- rbind(pre_Y, pre_N[rownames(pre_N)== "PT68 "])
row.names(pre_Y)[nrow(pre_Y)] <- "PT68 "
## and remove it from pre_N
pre_N <- subset(pre_N, row.names(pre_N) != "PT68 ")
## ----Scale and transpose
pre_Y <- t(scale(pre_Y))
pre_N <- t(scale(pre_N))
colnames(pre_Y) <- paste0("people_", sub(" ", "", sub("PT", "", colnames(pre_Y))))
colnames(pre_N) <- paste0("people_", sub(" ", "", sub("PT", "", colnames(pre_N))))
## GENE EXPRESSION PROFILING
data_gep <- as.data.frame(read_xlsx("4 normalized.expr.48samples.xlsx"))
#1. Remove Housekeeping
data_gep <- data_gep[data_gep$Code.Class == "Endogenous",]
raw_counts <- data_gep[-c(1,2,3,4)]
gep_patients <- as.numeric(sapply(colnames(raw_counts),
function(x) substr(x,10,11)))
info_dat <- data.frame(ID = info_data$ID,
GEP_num = ifelse(info_data$ID %in% gep_patients,info_data$ID, NA),
best_response = info_data$best_response,
group = ifelse(info_data$best_response == "PD", "NR", "R"))
info_dat <- info_dat[info_dat$best_response!="nv" & !is.na(info_dat$GEP_num),]
R_idx <- gep_patients %in% info_dat$GEP_num[info_dat$group == "R"]
NR_idx <- gep_patients %in% info_dat$GEP_num[info_dat$group == "NR"]
expr_R <- raw_counts[, R_idx]
expr_NR <- raw_counts[, NR_idx]
rownames(expr_R) <- data_gep$Name
rownames(expr_NR) <- data_gep$Name
#2. Remove zero expression genes
no_zeros_genes_R <- rownames(expr_R)[rowSums(expr_R == 0) == 0]
no_zeros_genes_NR <- rownames(expr_NR)[rowSums(expr_NR == 0) == 0] #these are their names
## Let's consider only these genes
filtr_expr_R <- expr_R[intersect(no_zeros_genes_R,
no_zeros_genes_NR),]
filtr_expr_NR <- expr_NR[intersect(no_zeros_genes_R,
no_zeros_genes_NR),]
colnames(filtr_expr_R) <- sub("_0+", "_", sub("\\d+_", "_", colnames(filtr_expr_R)))
colnames(filtr_expr_NR) <- sub("_0+", "_", sub("\\d+_", "_", colnames(filtr_expr_NR)))
## CLINICAL DATA
clinical_dat <- xl.read.file("5 PEOPLE aggiornato.xlsx", password = "PEOPLE",
xl.sheet = "DB CLINICO")
clinical_dat$patient_code <- paste0("people_", clinical_dat$ID)
# Extract common patients -------------------------------------------------
GEP <- as.data.frame(rbind(t(filtr_expr_R), t(filtr_expr_NR)))
CIP <- as.data.frame(rbind(t(pre_Y), t(pre_N)))
common_pats <- intersect(rownames(CIP), rownames(GEP))
GEP <- as.data.frame(cbind(filtr_expr_R, filtr_expr_NR))
CIP <- as.data.frame(cbind(pre_Y, pre_N))
common_pats <- intersect(colnames(CIP), colnames(GEP))
cat("Gene Expression profiling data has", dim(GEP)[1] , "variables about", dim(GEP)[2], "patients.")
cat("Circulating immune profiling data has", dim(CIP)[1] , "variables about", dim(CIP)[2], "patients.")
cat(length(common_pats), "common patients")
## PRIMI 10 HUBS
GEP_set1 <- GEP[c("CD48", "CD45RO", "PMS2", "PGPEP1", "EIF2B4", "ITGAL", "CD2",
"GIMAP4", "PTPN11", "PTPRC"),]
W1 <- compute_simnet(t(GEP_set1), inv = T)
W1[[1]];W1[[2]];W1[[3]]
cat(c("CD48", "CD45RO", "PMS2", "PGPEP1", "EIF2B4", "ITGAL", "CD2","GIMAP4", "PTPN11", "PTPRC"))
cat8c(
"g-MDSCs  (HLA-DRLo, CD33+, CD15+, CD14-)",
"Non-classical CD14dimCD16+",
"Non-classical CD14dimCD16+/HLA-DR++",
"NK cells /HLA-DR+",
"NK cells /CD56brCD16dim/HLA-DR+",
"NK cells /CD56dimCD16+"
)
cat(c(
"g-MDSCs  (HLA-DRLo, CD33+, CD15+, CD14-)",
"Non-classical CD14dimCD16+",
"Non-classical CD14dimCD16+/HLA-DR++",
"NK cells /HLA-DR+",
"NK cells /CD56brCD16dim/HLA-DR+",
"NK cells /CD56dimCD16+"
))
cat(c(
"g-MDSCs  (HLA-DRLo, CD33+, CD15+, CD14-)",
"Non-classical CD14dimCD16+",
"Non-classical CD14dimCD16+/HLA-DR++",
"NK cells /HLA-DR+",
"NK cells /CD56brCD16dim/HLA-DR+",
"NK cells /CD56dimCD16+"
), sep = ",")
cat(c(
"g-MDSCs  (HLA-DRLo, CD33+, CD15+, CD14-)",
"Non-classical CD14dimCD16+",
"Non-classical CD14dimCD16+/HLA-DR++",
"NK cells /HLA-DR+",
"NK cells /CD56brCD16dim/HLA-DR+",
"NK cells /CD56dimCD16+"
), sep = ", ")
devtools::install_github("PatrickRWright/ATCapiR")
# load the package
library(ATCapiR)
# vector of ATC codes
ATC_vect <- c("A02BC02", "C03BA08", "A02BC02", "A02BC02", "A07DA03", "A07DA03",
"A02BC02", "A02BC02", "A02BC02", "A02BC02", "C10AA05", "C10AA05",
"C10AA05", "N05BA06", "N05BA06", "N05BA06", "N06AX11", "N06AX11")
# you will need to create an account at https://bioportal.bioontology.org/ to receive an api_key
# the key below is not real and just supposed to give you an impression of the format
api_key <- "80abfaac-3eb2-4701-a2f9-1e57c9f84949"
# return translation at third level resolution
ATC_translated_df <- translate_ATC_codes(ATC_vect, level_depth = 3, api_key = api_key)
ATC_translated_df
ATC_translated_df %>% View()
library(dplyr)
ATC_translated_df %>% View()
library(httr)
library(jsonlite)
api_key <- "80abfaac-3eb2-4701-a2f9-1e57c9f84949"
res = GET("/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F410607006/mappings")
res = GET("https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F410607006/mappings")
res
res[[1]]
res[[2]]
res[[3]]
res[[4]]
res[[5]]
res[[6]]
res[[7]]
res[[8]]
res[[9]]
res[[10]]
res$content
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
res_list
paste0(url, "?apikey=", api_key)
paste0(url, "?apikey=")
paste0(url, api_key)
url_string <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F410607006/mappings"
paste0(url_string, "?apikey=", api_key)
res = GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
res_list
url_string <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F410607006/mappings"
res = GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
res_list$id
res_list$source
res_list$classes
res_list@id
res_list$`@id`
url_string <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F363409003/mappings"
res = GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
res_list$id
res_list$`@id`
res_list
res_list  %>%View()
res_list$classes
"ICD" %in %res_list$classes
"ICD" %in% res_list$classes
res_list$classes%>%View()
res_list$classes[[1]]
res_list$classes[[1]]
res_list$classes[[1]][1]
res_list$classes[[1]]@id
res_list$classes.[[1]][["@id"]]
res_list$classes[[1]][["@id"]]
res_list$classes[[2]][["@id"]]
res_list$classes[[3]][["@id"]]
res_list$classes[[5]][["@id"]]
res_list$classes[[6]][["@id"]]
res_list$classes[[7]][["@id"]]
res_list$classes[[10]][["@id"]]
res_list$classes[[10]][["@id"]][2]
"ICD" %in% res_list$classes[[10]][["@id"]][2]
"ICD" %in%
"fsdf"
res_list$classes[[10]][["@id"]][2]
res_list$classes[[10]][["@id"]][2][1]
"http" %in% res_list$classes[[10]][["@id"]][2]
res_list$classes[[10]][["@id"]][2][1] %>% typeof()
"purl" %in% res_list$classes[[10]][["@id"]][2]
?grep
strsplit(add, "ICD10/")
add <- res_list$classes[[10]][["@id"]][2]
strsplit(add, "ICD10/")
ICD_code
ICD_code <- strsplit(add, "ICD10/")[[2]]
ICD_code <- strsplit(add, "ICD10/")[2]
ICD_code
strsplit(add, "ICD10/")
strsplit(add, "ICD10/")[[1]] [2]
ICD_code <- strsplit(add, "ICD10/")[[1]][2]
ICD_code
grepl("ICD10", res_list$classes[[10]][["@id"]][2])
res_list$classes[[10]][["@id"]][2]
1:length(res_list$classes
)
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10CM", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]))
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10CM", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10CM/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("363409003")
SNOMED_to_ICD("363409003", api_key)
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("254837009", api_key)
?sleep
?Sys.sleep
SNOMED_to_ICD("47975008", api_key)
SNOMED_to_ICD("5668004", api_key)
?tryCatch
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
tryCatch({mapping_str <- res_list$classes[[i]][["@id"]][2]
}, warning = function(w) {
print("Codice non trovato")
})
}}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("254837009", api_key)
SNOMED_to_ICD("555", api_key)
SNOMED_to_ICD("254837009", api_key)
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("555", api_key)
?tryCatch
e <- simpleError("test error")
e
print(e)
stop("fred")
stop(e)
e <- simpleError("Codice ICD non trovato")
stop(e)
1/0
stop(e)
e
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD("363409003", api_key)
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD("363412000", api_key)
# 363409003 # cancer of descending colon
url_string <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F363412000/mappings"
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
print(url_string)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
print(res_list$classes[[1]][["@id"]][2])
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
print(res_list$classes[[2]][["@id"]][2])
for (i in 1:length(res_list$classes)){
if (grepl("ICD10", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F"
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
# print(res_list$classes[[2]][["@id"]][2])
for (i in 1:length(res_list$classes)){
if (grepl("ICD10/", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD("94381002", api_key)
data_ifo <- readxl::read_xlsx("C:/Users/Antonella/Desktop/snomed_parser/dwh-bb-ire-small-tissue.xlsx")
data_ifo$Snomed
SNOMED_to_ICD("30289006", api_key)
SNOMED_to_ICD("254878006", api_key)
SNOMED_to_ICD("188192002", api_key)
SNOMED_to_ICD("93934004", api_key)
SNOMED_to_ICD("1163405004", api_key)
data_ifo$Snomed%>%View()
data_ifo %>% View()
SNOMED_to_ICD("363434003", api_key)
SNOMED_to_ICD("94381002", api_key)
SNOMED_to_ICD("363412000", api_key)
SNOMED_to_ICD("363409003", api_key)
SNOMED_to_ICD("109841003", api_key)
SNOMED_to_ICD("25370001", api_key)
data_ifo$Snomed
snomed_rt2ct <- read.csv("C:/Users/Antonella/Desktop/full-list.csv")
snomed_rt2ct$SRT
data_ifo$Snomed
"T-C8000" %in% snomed_rt2ct$SRT
snomed_rt2ct$SRT ["T-C8000" %in% snomed_rt2ct$SRT]
snomed_rt2ct$SCT["T-C8000" %in% snomed_rt2ct$SRT]
snomed_rt2ct$SCT[snomed_rt2ct$SRT == "T-C8000"]
SNOMED_to_ICD("9875009", api_key)
data_ifo$Snomed
snomed_rt2ct$SCT[snomed_rt2ct$SRT == "T-28500"]
snomed_rt2ct$SCT[snomed_rt2ct$SRT == "T-83200"]
SNOMED_to_ICD("71252005", api_key)
snomed_rt2ct%>%View()
data_ifo %>% View()
citation()
contributors()
library(httr)
library(jsonlite)
library(dplyr)
api_key <- "80abfaac-3eb2-4701-a2f9-1e57c9f84949"
# url_string <- "https://data.bioontology.org/ontologies/SNOMEDCT/classes/http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F363409003/mappings"
#
# res = GET(paste0(url_string, "?apikey=", api_key))
#
#
# res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
#
#
# res_list  %>%View()
#
#
# add <- res_list$classes[[10]][["@id"]][2]
# ICD_code <- strsplit(add, "ICD10/")[[1]][2]
# ICD_code
## function to retrieve ICD codes from SNOMED_CT
SNOMED_to_ICD <- function(SNOMED_code, api_key){
add1 <- paste0("https://data.bioontology.org/ontologies/SNOMEDCT/classes/",
"http%3A%2F%2Fpurl.bioontology.org%2Fontology%2FSNOMEDCT%2F")
add2 <- "/mappings"
url_string <- paste0(add1, SNOMED_code, add2)
res <- GET(paste0(url_string, "?apikey=", api_key))
res_list <- fromJSON(rawToChar(res$content), flatten = TRUE)
for (i in 1:length(res_list$classes)){
if (grepl("ICD10/", res_list$classes[[i]][["@id"]][2])){
mapping_str <- res_list$classes[[i]][["@id"]][2]
}
}
ICD_code <- strsplit(mapping_str, "ICD10/")[[1]][2]
ICD_code
}
SNOMED_to_ICD("25370001", api_key)
SNOMED_to_ICD("363406005", api_key)
SNOMED_to_ICD("1268380000", api_key)
SNOMED_to_ICD("126838000", api_key)
SNOMED_to_ICD("363350007", api_key)
phyper(13, 18, 20, 20, lower.tail = F) <= 0.05
phyper(13, 20, 18, 18, lower.tail = F) <= 0.05
#-------------------------------------------------------------------------------
data_ifo <- readxl::read_xlsx("C:/Users/Antonella/Desktop/snomed_parser/dwh-bb-ire-small-tissue.xlsx")
data_ifo$Snomed
data_ifo$`Codice campione`
data_ifo$`Diagnosi provvisoria`
data_ifo$Snomed[763]
data_ifo[763, 'Diagnosi provvisoria']
data_ifo[763, 'Diagnosi definitiva']
data_ifo$Snomed
?menuItem
library(shinydashboard)
?menuItem
shiny::runApp('C:/Users/Antonella/Desktop/bb4FAIR_app2')
runApp('C:/Users/Antonella/Desktop/bb4FAIR_app2')
runApp('C:/Users/Antonella/Desktop/bb4FAIR_app2')
runApp('C:/Users/Antonella/Desktop/bb4FAIR_app2')
runApp('C:/Users/Antonella/Desktop/bb4FAIR_app2')
runApp('C:/Users/Antonella/Desktop/BBMRI_repos/bb4FAIR/survey_shiny/bb4FAIR_app')
runApp('C:/Users/Antonella/Desktop/BBMRI_repos/bb4FAIR/survey_shiny/bb4FAIR_app')
runApp('C:/Users/Antonella/Desktop/bb4FAIR_app2')
setwd("C:/Users/Antonella/Desktop/BBMRI_repos/bb4FAIR/survey_shiny")
library(rsconnect)
rsconnect::setAccountInfo(name='bbdataeng',
token='1A6630C592D9A63FD1C8D65C0F08F390',
secret='SLd4aCbiTMTzLbzh1QVn2/egA2b0H5JpLay6/iSG')
rsconnect::deployApp('bb4FAIR_app')
setwd("C:/Users/Antonella/Desktop/BBMRI_repos/bb4FAIR/survey_shiny")
rsconnect::deployApp('bb4FAIR_app')
